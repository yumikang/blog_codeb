// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// 서브도메인 테이블
model Subdomain {
  id          BigInt   @id @default(autoincrement())
  name        String   @unique @db.Text
  displayName String   @map("display_name") @db.Text
  themeColor  String   @default("primary") @map("theme_color") @db.Text
  description String?  @db.Text
  iconEmoji   String?  @map("icon_emoji") @db.Text
  isActive    Boolean  @default(true) @map("is_active")
  createdAt   DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt   DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  
  posts       Post[]
  
  @@map("subdomains")
}

// 프로필 테이블 (Supabase Auth 사용자와 연결)
model Profile {
  id        String   @id @db.Uuid
  email     String?  @db.Text
  fullName  String?  @map("full_name") @db.Text
  avatarUrl String?  @map("avatar_url") @db.Text
  website   String?  @db.Text
  bio       String?  @db.Text
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  
  posts     Post[]
  
  @@map("profiles")
}

// 포스트 테이블
model Post {
  id                String    @id @default(uuid()) @db.Uuid
  subdomainId       BigInt    @map("subdomain_id")
  authorId          String?   @map("author_id") @db.Uuid
  title             String    @db.Text
  slug              String    @db.Text
  content           String?   @db.Text
  excerpt           String?   @db.Text
  featuredImageUrl  String?   @map("featured_image_url") @db.Text
  featuredImageAlt  String?   @map("featured_image_alt") @db.Text
  status            String    @default("draft") @db.Text
  metaTitle         String?   @map("meta_title") @db.Text
  metaDescription   String?   @map("meta_description") @db.Text
  tags              String[]  @default([])
  viewCount         Int       @default(0) @map("view_count")
  publishedAt       DateTime? @map("published_at") @db.Timestamptz(6)
  createdAt         DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt         DateTime  @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  
  subdomain         Subdomain @relation(fields: [subdomainId], references: [id], onDelete: Cascade)
  author            Profile?  @relation(fields: [authorId], references: [id], onDelete: SetNull)
  comments          Comment[]
  
  @@unique([subdomainId, slug])
  @@index([subdomainId])
  @@index([status])
  @@index([publishedAt(sort: Desc)])
  @@index([slug])
  @@map("posts")
}

// 댓글 테이블
model Comment {
  id        String   @id @default(uuid()) @db.Uuid
  postId    String   @map("post_id") @db.Uuid
  userId    String   @map("user_id") @db.Uuid
  content   String   @db.Text
  status    String   @default("pending") @db.Text
  parentId  String?  @map("parent_id") @db.Uuid
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  parent    Comment? @relation("CommentToComment", fields: [parentId], references: [id], onDelete: Cascade)
  replies   Comment[] @relation("CommentToComment")
  
  @@index([postId])
  @@index([userId])
  @@index([status])
  @@map("comments")
}

// 관리자 테이블
model AdminUser {
  id           String    @id @default(uuid()) @db.Uuid
  username     String    @unique @db.Text
  passwordHash String    @map("password_hash") @db.Text
  email        String?   @unique @db.Text
  fullName     String?   @map("full_name") @db.Text
  isActive     Boolean   @default(true) @map("is_active")
  lastLoginAt  DateTime? @map("last_login_at") @db.Timestamptz(6)
  createdAt    DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt    DateTime  @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  
  sessions     AdminSession[]
  
  @@map("admin_users")
}

// 관리자 세션 테이블
model AdminSession {
  id          String   @id @default(uuid()) @db.Uuid
  adminUserId String   @map("admin_user_id") @db.Uuid
  token       String   @unique @db.Text
  expiresAt   DateTime @map("expires_at") @db.Timestamptz(6)
  createdAt   DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  
  adminUser   AdminUser @relation(fields: [adminUserId], references: [id], onDelete: Cascade)
  
  @@index([token])
  @@index([expiresAt])
  @@map("admin_sessions")
}
